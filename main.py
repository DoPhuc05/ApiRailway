import os
import cv2
import numpy as np
import aiofiles
from fastapi import FastAPI, UploadFile, File
import uvicorn
from pyngrok import ngrok
from ultralytics import YOLO
from dtbase import db, upload_to_imgbb, upload_to_streamable # Thay ƒë·ªïi sang ImgBB
from collections import deque  # üî• L∆∞u l·ªãch s·ª≠ s·ªë l∆∞·ª£ng swimmer
from datetime import datetime
from fastapi.responses import HTMLResponse
from fastapi.responses import JSONResponse
from fastapi import Request
import gdown

# ‚úÖ Kh·ªüi t·∫°o FastAPI
app = FastAPI()


# ƒê∆∞·ªùng d·∫´n l∆∞u file
MODEL_PATH = "best.pt"

# ID c·ªßa file Google Drive
FILE_ID = "1GNc8GNxEhlU4f2gOHvVpIWLqbDIjgU2R"
GDRIVE_URL = f"https://drive.google.com/uc?id={FILE_ID}"

# T·∫£i m√¥ h√¨nh n·∫øu ch∆∞a t·ªìn t·∫°i
if not os.path.exists(MODEL_PATH):
    print("‚¨áÔ∏è ƒêang t·∫£i m√¥ h√¨nh YOLOv8 t·ª´ Google Drive...")
    gdown.download(GDRIVE_URL, MODEL_PATH, quiet=False)
    print("‚úÖ T·∫£i m√¥ h√¨nh th√†nh c√¥ng!")

# Load m√¥ h√¨nh
print("üîÑ ƒêang t·∫£i m√¥ h√¨nh YOLOv8...")
model = YOLO(MODEL_PATH)
print("‚úÖ M√¥ h√¨nh YOLOv8 ƒë√£ s·∫µn s√†ng!")

@app.get("/", response_class=HTMLResponse)
async def homepage():
    return """
    <html>
        <head>
            <title>YOLOv8 Swimmer Detection</title>
        </head>
        <body>
            <h2>Upload Image</h2>
            <form action="/predict-image/" enctype="multipart/form-data" method="post">
                <input type="file" name="file">
                <input type="submit">
            </form>

            <h2>Upload Video</h2>
            <form action="/predict-video/" enctype="multipart/form-data" method="post">
                <input type="file" name="file">
                <input type="submit">
            </form>

            <h2>Realtime Camera Detection</h2>
            <a href="/camera/">Camera</a><br>
            <h2>L·ªãch s·ª≠ d·ª± ƒëo√°n</h2>
            <a href="/history">üîç Xem l·ªãch s·ª≠</a>
        </body>
    </html>
    """
@app.get("/camera", response_class=HTMLResponse)
async def camera_interface():
    video_url = getattr(app.state, "last_camera_url", None)
    video_html = f"""
        <h3>üéûÔ∏è Video m·ªõi nh·∫•t</h3>
        <video width="640" controls>
            <source src="{video_url}" type="video/mp4">
            Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ ph√°t video.
        </video>
    """ if video_url else "<p>Ch∆∞a c√≥ video n√†o.</p>"

    return f"""
    <html>
        <head><title>Realtime Camera Detection</title></head>
        <body>
            <h2>üì∏ Realtime Detection</h2>
            <form action="/start-camera/" method="get">
                <button type="submit">‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu Camera</button>
            </form>
            <form action="/stop-camera/" method="get">
                <button type="submit">‚èπ D·ª´ng Camera</button>
            </form>
            <br>
            {video_html}
            <br>
            <a href="/">‚¨Ö Quay l·∫°i trang ch√≠nh</a>
        </body>
    </html>
    """


@app.get("/history", response_class=HTMLResponse)
async def view_history():
    rows = ""
    for item in db.predictions.find().sort("timestamp", -1).limit(10):
        count = item.get("total_swimmer_count") or item.get("person_count") or 0
        time = item.get("timestamp", "Kh√¥ng c√≥")
        url = item.get("video_url") or item.get("image_url") or "#"
        media_type = "H√¨nh ·∫£nh" if "image_url" in item else "Video"
        rows += f"""
        <tr>
            <td>{time}</td>
            <td>{count}</td>
            <td>{media_type}</td>
            <td><a href="{url}" target="_blank">Xem</a></td>
        </tr>
        """ 

    return f"""
    <html>
        <head><title>L·ªãch s·ª≠ d·ª± ƒëo√°n</title></head>
        <body>
            <h2>L·ªãch s·ª≠ d·ª± ƒëo√°n g·∫ßn ƒë√¢y</h2>
            <table border="1">
                <tr>
                    <th>Th·ªùi gian</th>

                    <th>S·ªë l∆∞·ª£ng swimmer</th>
                    <th>Lo·∫°i</th>
                    <th>Xem</th>
                </tr>
                {rows}
            </table>
            <br>
            <a href="/">‚¨ÖÔ∏è Quay l·∫°i trang ch√≠nh</a>
        </body>
    </html>
    """

@app.post("/predict-image/", response_class=HTMLResponse)
async def predict_image(file: UploadFile = File(...)):
    try:
        image_bytes = await file.read()
        image_np = np.frombuffer(image_bytes, np.uint8)
        image = cv2.imdecode(image_np, cv2.IMREAD_COLOR)
        
        if image is None:
            return HTMLResponse(content="Kh√¥ng th·ªÉ gi·∫£i m√£ ·∫£nh.", status_code=400)
        
        results = model(image)
        predictions = []
        person_count = 0
        
        for result in results:
            for i in range(len(result.boxes)):
                x1, y1, x2, y2 = map(int, result.boxes.xyxy[i].tolist())
                score = round(result.boxes.conf[i].item(), 2)
                label = model.names[int(result.boxes.cls[i].item())]

                if label.lower() == "swimmer":
                    person_count += 1

                predictions.append({
                    "label": label,
                    "confidence": score,
                    "bbox": {"x1": x1, "y1": y1, "x2": x2, "y2": y2}
                })
        
        image_with_boxes = results[0].plot()
        output_path = "output.jpg"
        cv2.imwrite(output_path, image_with_boxes)

        imgbb_url = upload_to_imgbb(output_path)

        if os.path.exists(output_path):
            os.remove(output_path)
        
        db.predictions.insert_one({
            "image_url": imgbb_url,
            "predictions": predictions,
            "person_count": person_count,
            "timestamp": datetime.now().strftime("%Y%m%d_%H%M%S")

        })
        
        html_content = f"""
        <html>
            <body>
                <h3>‚úÖ D·ª± ƒëo√°n th√†nh c√¥ng!</h3>
                <p>S·ªë swimmer ph√°t hi·ªán: <strong>{person_count}</strong></p>
                <img src="{imgbb_url}" alt="Predicted Image" width="640">
                <br><br><a href="/">‚¨Ö Quay l·∫°i trang ch·ªß</a>
            </body>
        </html>
        """
        return HTMLResponse(content=html_content)
    
    except Exception as e:
        return HTMLResponse(content=f"L·ªói x·ª≠ l√Ω ·∫£nh: {e}", status_code=500)

    

# ‚úÖ X·ª¨ L√ù VIDEO & L∆ØU V√ÄO MONGODB + STREAMABLE
@app.post("/predict-video/")
async def predict_video(file: UploadFile = File(...)):
    """Nh·∫≠n video, x·ª≠ l√Ω b·∫±ng YOLOv8, l∆∞u MongoDB & Streamable"""
    input_video_path = "temp_input.mp4"
    async with aiofiles.open(input_video_path, "wb") as f:
        await f.write(await file.read())

    cap = cv2.VideoCapture(input_video_path)
    if not cap.isOpened():
        return {"error": "Kh√¥ng th·ªÉ m·ªü video!"}

    fps = int(cap.get(cv2.CAP_PROP_FPS))
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

    output_video_path = "output_video.mp4"
    fourcc = cv2.VideoWriter_fourcc(*"mp4v")
    out = cv2.VideoWriter(output_video_path, fourcc, fps, (width, height))

    frame_count = 0
    total_swimmer_count = 0
    prev_swimmer_count = 0  # Bi·∫øn theo d√µi s·ªë swimmer nh√≥m tr∆∞·ªõc
    prev_counts = []  # L∆∞u s·ªë swimmer c·ªßa nh√≥m 3 frame g·∫ßn nh·∫•t

    while True:
        ret, frame = cap.read()
        if not ret:
            break  # H·∫øt video

        frame_count += 1

        # ‚úÖ Ch·ªâ x·ª≠ l√Ω m·ªói 5 frame ƒë·ªÉ t·ªëi ∆∞u
        if frame_count % 5 == 0:
            results = model(frame)

            if results and len(results) > 0:
                frame = results[0].plot()  # V·∫Ω bounding box l√™n frame

                # ‚úÖ ƒê·∫øm s·ªë swimmer trong frame hi·ªán t·∫°i
                current_swimmer_count = sum(
                    1 for box in results[0].boxes if model.names[int(box.cls.item())] == "swimmer"
                )
                prev_counts.append(current_swimmer_count)

                # ‚úÖ Khi ƒë·ªß 3 frame, c·∫≠p nh·∫≠t s·ªë swimmer n·∫øu c√≥ thay ƒë·ªïi
                if len(prev_counts) == 3:
                    avg_swimmer_count = round(sum(prev_counts) / 3)  # L·∫•y trung b√¨nh nh√≥m 3 frame

                    if avg_swimmer_count != prev_swimmer_count:
                        total_swimmer_count = avg_swimmer_count  # C·∫≠p nh·∫≠t s·ªë swimmer
                        prev_swimmer_count = avg_swimmer_count  # L∆∞u l·∫°i ƒë·ªÉ so s√°nh v·ªõi nh√≥m ti·∫øp theo

                    prev_counts = []  # ‚úÖ Reset nh√≥m 3 frame ƒë·ªÉ ti·∫øp t·ª•c theo d√µi

        out.write(frame)  # ‚úÖ Ghi frame v√†o video ƒë·∫ßu ra

    # ‚úÖ Gi·∫£i ph√≥ng t√†i nguy√™n
    cap.release()
    out.release()

    # ‚úÖ Upload video l√™n Streamable
    streamable_url = upload_to_streamable(output_video_path)

    # ‚úÖ X√≥a c√°c file t·∫°m
    for file_path in [input_video_path, output_video_path]:
        if os.path.exists(file_path):
            os.remove(file_path)

    # ‚úÖ L∆∞u v√†o MongoDB
    db.predictions.insert_one({
        "video_url": streamable_url,
        "total_swimmer_count": total_swimmer_count, # üî• T·ªïng s·ªë swimmer sau khi x·ª≠ l√Ω
        "timestamp": datetime.now().strftime("%Y%m%d_%H%M%S")

    })

    html = f"""
    <html>
        <body>
            <h3>‚úÖ Video ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng!</h3>
            <p>T·ªïng s·ªë swimmer: <strong>{total_swimmer_count}</strong></p>
            <p>üëâ <a href="{streamable_url}" target="_blank">Xem video tr√™n Streamable</a></p>
            <iframe src="{streamable_url}" width="640" height="360" frameborder="0" allowfullscreen></iframe>
            <br><br><a href="/">‚¨Ö Quay l·∫°i trang ch·ªß</a>
        </body>
    </html>
    """
    return HTMLResponse(content=html)



